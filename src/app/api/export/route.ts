import { NextResponse } from "next/server";
import { all } from "@/lib/sql";
import fs from "fs";
import path from "path";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

type ProductRow = { id: number; name: string };
type PriceRow = { seller_name: string; price: number | null; link: string | null };

// ⬇️ Write where your component imports from: src/data/db/Data.ts
// If you moved the files, adjust this path accordingly.
const OUT = path.join(process.cwd(), "data", "db", "Data.ts");

export async function GET() {
  // 1) get all product ids
  const products = await all<ProductRow>("select/all_products");

  // 2) build id -> retailers[]
  const byId: Record<
    string,
    { store: string; price: number; inStock: boolean; url: string | null }[]
  > = {};

  for (const p of products) {
    const rows = await all<PriceRow>("select/display_prices", [p.id]);

    byId[String(p.id)] = (rows || [])
      .map((r) => ({
        store: r.seller_name,
        price: typeof r.price === "number" ? r.price : Number(r.price ?? NaN),
        inStock: false,
        url: r.link ?? null,
      }))
      .filter((x) => Number.isFinite(x.price));
  }

  // 3) emit the retailers-only TS module
  const content =
`// Auto-generated by /api/export
// --------------------------------------------
// Retailers-only map (safe to overwrite)
// --------------------------------------------
export const RetailersByProduct = ${JSON.stringify(byId, null, 2)};
`;

  try {
    fs.mkdirSync(path.dirname(OUT), { recursive: true });
    fs.writeFileSync(OUT, content, "utf8");
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e?.message || "write failed" }, { status: 500 });
  }

  const productCount = products.length;
  const retailerPairs = Object.values(byId).reduce((n, arr) => n + arr.length, 0);
  return NextResponse.json({ ok: true, productCount, retailerPairs, out: OUT });
}
