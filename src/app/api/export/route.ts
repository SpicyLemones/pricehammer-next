// src/app/api/export/route.ts
import { NextResponse } from "next/server";
import { all, query } from "@/lib/sql"; // we’ll use `all<T>` to get proper types
import fs from "fs";
import path from "path";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

// DB row shapes
type ProductRow = { id: number; name: string };
type PriceRow = { seller_name: string; price: number | null; link: string | null };

// File we’ll write (optional)
const OUT = path.join(process.cwd(), "data", "db", "Data.ts");

// TS interface we’ll emit to the file, and also the runtime type we return
export type ExportedProduct = {
  id: string;
  name: string;
  game: string;
  faction: string;
  category: string;
  points: number;
  image: string;
  retailers: {
    store: string;
    price: number;
    inStock: boolean;
    url: string | null;
  }[];
};

function toTsLiteral(obj: unknown) {
  // Pretty JSON, then unquote prop keys for a TS literal
  return JSON.stringify(obj, null, 2).replace(/"([^"]+)":/g, "$1:");
}

export async function GET() {
  // 1) grab products
  const products = await all<ProductRow>("select/all_products");

  // 2) build export payload
  const exportProducts: ExportedProduct[] = [];
  for (const p of products) {
    const prices = await all<PriceRow>("select/display_prices", [p.id]);

    exportProducts.push({
      id: String(p.id),
      name: p.name,
      // You can enrich these later if you add columns
      game: "",
      faction: "",
      category: "",
      points: 0,
      image: "",
      retailers: (prices || []).map((r: PriceRow) => ({
        store: r.seller_name,
        // coerce to number; UI already guards with Number.isFinite
        price: typeof r.price === "number" ? Number(r.price) : Number(r?.price),
        inStock: false,
        url: r.link ?? null,
      })),
    });
  }

  // 3) optionally write a Data.ts file
  try {
    const content =
`// Auto-generated by /api/export

export interface Product {
  id: string;
  name: string;
  game: string;
  faction: string;
  category: string;
  points: number;
  image: string;
  retailers: {
    store: string;
    price: number;
    inStock: boolean;
    url: string | null;
  }[];
}

export const gameCategories = {
  warhammer40k: [
    'Characters',
    'Battleline',
    'Dedicated Transports',
    'Other',
    'Fortifications'
  ],
  ageofsigmar: [
    'Cavalry Heroes',
    'Infantry Heroes',
    'Monster Heroes',
    'Cavalry',
    'Infantry',
    'Monster',
    'War machine',
    'Regiment of Renown',
    'Faction terrain',
    'Endless spell'
  ]
};

export const Products: Product[] = ${toTsLiteral(exportProducts)};
`;
    fs.mkdirSync(path.dirname(OUT), { recursive: true });
    fs.writeFileSync(OUT, content, "utf8");
  } catch (e) {
    // Writing the file is optional; still return JSON even if write fails
    console.warn("Export: failed to write Data.ts:", (e as any)?.message || e);
  }

  // 4) return the data as JSON too (handy for debugging / CI)
  return NextResponse.json({ ok: true, count: exportProducts.length, products: exportProducts });
}
