// src/app/api/export/route.ts
import { NextResponse } from "next/server";
import { query } from "@/lib/sql";
import fs from "fs";
import path from "path";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

export async function GET(req: Request) {
  try {
    // 1) Pull products
    const products = await query<any[]>("all", "select/all_products");

    // 2) For each product, pull its display prices
    const out: any[] = [];
    for (const p of products) {
      const prices = await query<any[]>("all", "select/display_prices", [p.id]);

      out.push({
        id: String(p.id),
        name: p.name,
        // You can enrich these later if you add columns:
        game: "",
        faction: "",
        category: "",
        points: 0,
        image: "",
        retailers: (prices || []).map((r) => ({
          store: r.seller_name,
          // If a row happens to be null, coerce to number or NaN. Your UI already guards with Number.isFinite.
          price: typeof r.price === "number" ? Number(r.price) : Number(r?.price),
          inStock: false,
          url: r.link || "",
        })),
      });
    }

    // 3) Build TS file contents (same interface you used before)
    const header = `// Auto-generated by /api/export on ${new Date().toISOString()}

export interface Product {
  id: string;
  name: string;
  game: string;
  faction: string;
  category: string;
  points: number;
  image: string;
  retailers: {
    store: string;
    price: number; // may be NaN if missing; UI guards with Number.isFinite(...)
    inStock: boolean;
    url: string;
  }[];
}

// (kept for compatibility with your old code; tweak as you like)
export const gameCategories = {
  warhammer40k: [
    'Characters',
    'Battleline',
    'Dedicated Transports',
    'Other',
    'Fortifications'
  ],
  ageofsigmar: [
    'Cavalry Heroes',
    'Infantry Heroes',
    'Monster Heroes',
    'Cavalry',
    'Infantry',
    'Monster',
    'War machine',
    'Regiment of Renown',
    'Faction terrain',
    'Endless spell'
  ]
};

export const Products: Product[] = `;

    const body = JSON.stringify(out, null, 2);
    const content = `${header}${body};\n`;

    // 4) Write to src/data/Data.ts
    const outDir = path.join(process.cwd(), "src", "data");
    const outFile = path.join(outDir, "Data.ts");
    fs.mkdirSync(outDir, { recursive: true });
    fs.writeFileSync(outFile, content, "utf8");

    // Optional: let the caller download instead of writing to disk
    const url = new URL(req.url);
    if (url.searchParams.get("download") === "1") {
      return new NextResponse(content, {
        headers: {
          "content-type": "text/plain; charset=utf-8",
          "content-disposition": 'attachment; filename="Data.ts"',
        },
      });
    }

    return NextResponse.json({ ok: true, file: "src/data/Data.ts", count: out.length });
  } catch (e: any) {
    return NextResponse.json(
      { ok: false, error: e?.message || "export failed" },
      { status: 500 }
    );
  }
}
